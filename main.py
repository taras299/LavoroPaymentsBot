import telebot
from telebot import types
from sqlalchemy import create_engine, Column, Integer, String, Sequence, Boolean
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.exc import SQLAlchemyError
import logging
import time
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
    username = Column(String(50))
    is_banned = Column(Boolean, default=False)

class Payment(Base):
    __tablename__ = 'payments'
    id = Column(Integer, Sequence('payment_id_seq'), primary_key=True)
    user_id = Column(Integer)
    username = Column(String(50))
    link = Column(String(255))
class PaymentRequest(Base):
    __tablename__ = 'payment_requests'
    id = Column(Integer, Sequence('payment_request_id_seq'), primary_key=True)
    user_id = Column(Integer)
    last_request_time = Column(Integer)  

engine = create_engine('sqlite:///bot.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

bot_token = "API KEY BOTFATHER"
bot = telebot.TeleBot(bot_token)

admin_ids = ['admins id']
group_chat_id = group id

user_payment_request = {}
user_payment_change_request = {}
user_links = {}

def send_notification_to_group(message):
    try:
        bot.send_message(group_chat_id, message)
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"Failed to send message to group: {e}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    username = message.from_user.username
    user_id = message.from_user.id
    try:
        user = session.query(User).filter(User.username == username).first()
        if not user:
            new_user = User(username=username)
            session.add(new_user)
            session.commit()
        elif user.is_banned:
            bot.send_message(message.chat.id, "‚ùå–í–∞—Å –∑–∞–ø–µ—Ç—É—à–∏–ª–∏ –∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
            return
    except SQLAlchemyError as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in /start: {e}")
        return

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("üí∏–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—Éüí∏", callback_data='get_payment')
    markup.add(button)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—Éü§ë", reply_markup=markup)
    
    send_notification_to_group(f"@{username}|{user_id}|–í—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

@bot.message_handler(commands=['change'])
def change_link(message):
    username = message.from_user.username
    user_id = message.from_user.id

    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user and user.is_banned:
            bot.send_message(message.chat.id, "‚ùå–í–∞—Å –∑–∞–ø–µ—Ç—É—à–∏–ª–∏ –∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
            return

        payment = session.query(Payment).filter(Payment.user_id == user_id).first()
        if payment:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Å—á–µ—Ç.")
            user_payment_change_request[user_id] = True
            send_notification_to_group(f"@{username}|{user_id}|–í—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /change")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    except SQLAlchemyError as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in /change: {e}")

@bot.message_handler(commands=['ban'])
def ban_user(message):
    if str(message.from_user.id) not in admin_ids:
        return
    
    try:
        target_username = message.text.split()[1].lstrip('@')
        user = session.query(User).filter(User.username == target_username).first()
        if user:
            user.is_banned = True
            session.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
    except SQLAlchemyError as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in /ban: {e}")

@bot.message_handler(commands=['unban'])
def unban_user(message):
    if str(message.from_user.id) not in admin_ids:
        return
    
    try:
        target_username = message.text.split()[1].lstrip('@')
        user = session.query(User).filter(User.username == target_username).first()
        if user:
            user.is_banned = False
            session.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
    except SQLAlchemyError as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in /unban: {e}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global user_payment_request, user_payment_change_request, user_links
    username = call.from_user.username
    user_id = call.from_user.id
    
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user and user.is_banned:
            bot.send_message(call.message.chat.id, "‚ùå–í–∞—Å –∑–∞–ø–µ—Ç—É—à–∏–ª–∏ –∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
            return
    except SQLAlchemyError as e:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in callback_query: {e}")
        return

    if call.data == 'get_payment':
        payment_request = session.query(PaymentRequest).filter(PaymentRequest.user_id == user_id).first()
        current_time = int(time.time())

        if payment_request:
            time_since_last_request = current_time - payment_request.last_request_time
            if time_since_last_request < 3600:  
                bot.send_message(call.message.chat.id, "–í—ã–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑ –≤ —á–∞—Å!")
                return
        
        if payment_request:
            payment_request.last_request_time = current_time
        else:
            payment_request = PaymentRequest(user_id=user_id, last_request_time=current_time)
            session.add(payment_request)
        session.commit()

        user_payment_request[user_id] = True
        
        user = session.query(Payment).filter(Payment.user_id == user_id).first()
        if user and user.link:
            markup = types.InlineKeyboardMarkup()
            yes_button = types.InlineKeyboardButton("–î–∞", callback_data='use_old_link')
            no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='enter_new_link')
            markup.add(yes_button, no_button)
            bot.send_message(call.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É?", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —Å—á–µ—Ç CryptoBot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ãüí∞.\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—á–µ—Ç–∞: https://telegra.ph/Kak-poluchit-mnogorazovyj-schet-v-kriptobote-05-24")
        
        send_notification_to_group(f"@{username}|{user_id}|–ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É'")

    elif call.data == 'use_old_link':
        user = session.query(Payment).filter(Payment.user_id == user_id).first()
        if user:
            markup = types.InlineKeyboardMarkup()
            paid_button = types.InlineKeyboardButton("–í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f'paid_{user_id}')
            markup.add(paid_button)
            for admin_id in admin_ids:
                bot.send_message(admin_id, f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:\n–ù–∏–∫–Ω–µ–π–º: @{user.username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–°—Å—ã–ª–∫–∞: {user.link}", reply_markup=markup)
            bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç. –í —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
            send_notification_to_group(f"@{username}|{user_id}|–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏: {user.link}")
        
    elif call.data == 'enter_new_link':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É")
        user_payment_request[user_id] = True
    
    elif call.data == 'confirm_link':
        if user_id in user_links:
            link = user_links[user_id]
            try:
                user = session.query(Payment).filter(Payment.user_id == user_id).first()
                if user:
                    user.link = link
                else:
                    user = Payment(user_id=user_id, username=username, link=link)
                    session.add(user)
                session.commit()
            except SQLAlchemyError as e:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
                logger.error(f"Database error in confirm_link: {e}")
                return

            markup = types.InlineKeyboardMarkup()
            paid_button = types.InlineKeyboardButton("–í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f'paid_{user_id}')
            markup.add(paid_button)
            for admin_id in admin_ids:
                bot.send_message(admin_id, f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:\n–ù–∏–∫–Ω–µ–π–º: @{username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–°—Å—ã–ª–∫–∞: {link}", reply_markup=markup)

            bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç. –í —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
            send_notification_to_group(f"@{username}|{user_id}|–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å—Å—ã–ª–∫—É: {link}")
            
            user_payment_request[user_id] = False
            user_payment_change_request[user_id] = False
            del user_links[user_id]

    elif call.data == 'reject_link':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
        user_payment_request[user_id] = True
        user_payment_change_request[user_id] = False
        send_notification_to_group(f"@{username}|{user_id}|–û—Ç–∫–ª–æ–Ω–∏–ª –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –≤—ã–±—Ä–∞–ª –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é")

    elif call.data.startswith('paid_'):
        user_id = int(call.data.split('_')[1])
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            bot.send_message(call.message.chat.id, f"–ü–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–ø–ª–∞—á–µ–Ω.")
            bot.send_message(user_id, "üéâ–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç.")
        except Exception as e:
            logger.error(f"Error processing payment confirmation: {e}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global user_payment_request, user_payment_change_request, user_links
    username = message.from_user.username
    user_id = message.from_user.id
    link = message.text

    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user and user.is_banned:
            bot.send_message(message.chat.id, "‚ùå–í–∞—Å –∑–∞–ø–µ—Ç—É—à–∏–ª–∏ –∏ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
            return
    except SQLAlchemyError as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"Database error in handle_message: {e}")
        return

    if user_id not in user_payment_request and user_id not in user_payment_change_request:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    if user_id in user_payment_request and user_payment_request[user_id]:
        user_links[user_id] = link
        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton("–î–∞", callback_data='confirm_link')
        reject_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='reject_link')
        markup.add(confirm_button, reject_button)
        bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?\n{link}", reply_markup=markup)
        user_payment_request[user_id] = False
    
    if user_id in user_payment_change_request and user_payment_change_request[user_id]:
        try:
            payment = session.query(Payment).filter(Payment.user_id == user_id).first()
            if payment:
                payment.link = link
                session.commit()
                bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                send_notification_to_group(f"@{username}|{user_id}|–û–±–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞: {link}")
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
        except SQLAlchemyError as e:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
            logger.error(f"Database error in update link: {e}")
        user_payment_change_request[user_id] = False

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")
        time.sleep(15)
